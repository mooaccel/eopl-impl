; 用insert sort
; 取car loi插入(sort (cdr loi))
(define (insert elem sorted_list)
  (if (null? sorted_list)
      (cons elem '())
      (let ((car_sorted_list (car sorted_list)))
        (if (< elem car_sorted_list)
            (cons elem sorted_list)
            (cons car_sorted_list (insert elem (cdr sorted_list)))))))
            ;(append (list elem car_sorted_list) (cdr sorted_list))
            ;(cons car_sorted_list (insert elem (cdr sorted_list)))))))
(define (sort loi)
  (if (null? loi)
      '()
      (insert (car loi) (sort (cdr loi)))))
(equal? (sort '()) '())
(equal? (sort '(1 2 3 4)) '(1 2 3 4))
(equal? (sort '(4 3 2 1)) '(1 2 3 4))
(equal? (sort '(8 2 5 2 3)) '(2 2 3 5 8))

; 改成实现成iterative process:
(define (sort-v2 loi)
  (define (sort-aux sorted_list remaining)
    (if (null? remaining)
        sorted_list
        (sort-aux (insert (car remaining) sorted_list) (cdr remaining))))
  (sort-aux '() loi))
(equal? (sort-v2 '()) '())
(equal? (sort-v2 '(1 2 3 4)) '(1 2 3 4))
(equal? (sort-v2 '(4 3 2 1)) '(1 2 3 4))
(equal? (sort-v2 '(8 2 5 2 3)) '(2 2 3 5 8))