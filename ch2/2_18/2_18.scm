; 不保证顺序吧? 这种表示有啥用?
(define (number->sequence num)
  (list num '() '()))
(define (current-element node_in_sequence)
  (car node_in_sequence))
(define (move-to-left node_in_sequence)
  (let ((elem (car node_in_sequence))
        (left (cadr node_in_sequence))
        (right (car (cddr node_in_sequence))))
      (if (null? left)
          #f
          (list (car left) (cdr left) (cons elem right)))
        ))
(define (move-to-right node_in_sequence)
  (let ((elem (car node_in_sequence))
        (left (cadr node_in_sequence))
        (right (car (cddr node_in_sequence))))
      (if (null? right)
          #f
          (list (car right) (cons elem left) (cdr right)))
        ))
(define (insert-to-left num node_in_sequence)
  (let ((elem (car node_in_sequence))
        (left (cadr node_in_sequence))
        (right (car (cddr node_in_sequence))))
    (list elem (cons num left) right)))
(define (insert-to-right num node_in_sequence)
  (let ((elem (car node_in_sequence))
        (left (cadr node_in_sequence))
        (right (car (cddr node_in_sequence))))
    (list elem left (cons num right))))